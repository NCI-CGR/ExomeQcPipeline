#!/usr/bin/python
import glob
import sys
import os
from glob import glob

project = config['project']

postcalling_qc_dir = 'postcalling_qc'
#GROUPS=['BC','CTRL']
GROUPS=[]

def getReport(wildcards):
    return glob(project + '/post_variant_calling_qc/post_variant_counts.txt', recursive=False)
	
for bam_subdir in glob(project + '/../bam_location/*'):
    GROUPS.append(os.path.basename(bam_subdir))
	
rule all:
    input:
        total_count = postcalling_qc_dir + '/variant_count.png',
        titv_ratio = postcalling_qc_dir + '/titv_ratio.png',
        lowqual_basechange = postcalling_qc_dir + '/lowqual_basechange.png',
        basechange_group = expand(postcalling_qc_dir + '/basechange_{group}.png', group = GROUPS) 

rule postcalling_qc_table:
    input:
        getReport
    output:
        variant = postcalling_qc_dir + '/titv.txt',
        lowqual_basechange = postcalling_qc_dir + '/low_qual_basechange.txt',
        basechange_group = expand(postcalling_qc_dir + '/basechange_{group}.txt', group = GROUPS) 
    params:
        postcalling_qc_dir
    shell:
        'sh ./post_calling_table.sh {input} {params}'

rule variant_count_plot:
    input:
        variant = postcalling_qc_dir + '/titv.txt'
    output:
        total_count = postcalling_qc_dir + '/variant_count.png',
        titv_ratio = postcalling_qc_dir + '/titv_ratio.png',
        R = postcalling_qc_dir + '/variant_count.R',
        Rout = postcalling_qc_dir + '/variant_count.R.out'
    run:
        rTxt = '''
        data <- read.table("''' + str(input) + '''", header = TRUE, sep = "\t" )
        colors <- c(rgb(0, 0, 1, .3), rgb(1, 0, 0, .3), rgb(.75, .75, .75, .3), rgb(0, 1, 0, .3))
        png("''' + str(output.total_count) + '''")
        plot(data$TOTAL, xlab="Samples", ylab="Total Variant Count", pch=20,ylim=c(100000,250000), col= colors[data$CACO])
        legend("topright", legend = c("Cases", "Controls"), col = c("blue", "red"), pch = 19, cex=0.7, bty="n")
        dev.off()
        png("''' + str(output.titv_ratio) + '''")
        plot(data$RATIO, xlab="Samples", ylab="Ti/TV Ratio", pch=20,col= colors[data$CACO])
        ave_ratio=mean(data$RATIO)
        sd_ratio=sd(data$RATIO)*3
        abline(h=ave_ratio)
        abline(h=ave_ratio+sd_ratio,col="blue")
        abline(h=ave_ratio-sd_ratio,col="blue")
        legend("topright", legend = c("Cases", "Controls"), col = c("blue", "red"), pch = 19, cex=0.7, bty="n")
        dev.off()		
        '''
        with open(output.R, 'w') as R:
            R.write(rTxt)
        shell('R --vanilla < {output.R} > {output.Rout}')

rule lowqual_basechange_plot:
    input:
        variant = postcalling_qc_dir + '/low_qual_basechange.txt'
    output:
        lowqual_basechange = postcalling_qc_dir + '/lowqual_basechange.png',
        R = postcalling_qc_dir + '/lowqual_basechange.R',
        Rout = postcalling_qc_dir + '/lowqual_basechange.R.out'
    run:
        rTxt = '''
        data <- read.table("''' + str(input) + '''", header = TRUE, sep = "\t" )
        png("''' + str(output.lowqual_basechange) + '''")
        matplot(data,pch=20, xlab= "Sample", ylab= "number of low qual variant", col = c(2:ncol(data)),cex = 0.4)
        legend("topleft", legend = colnames(data[,2:ncol(data)]),col = c(2:ncol(data)), pch=20)
        dev.off()
        '''
        with open(output.R, 'w') as R:
            R.write(rTxt)
        shell('R --vanilla < {output.R} > {output.Rout}')

rule basechange_group_plot:
    input:
        postcalling_qc_dir + '/basechange_{group}.txt'
    output:
        basechange_group = postcalling_qc_dir + '/basechange_{group}.png',
        R = postcalling_qc_dir + '/basechange_{group}.R',
        Rout = postcalling_qc_dir + '/basechange_{group}.R.out'
    run:
        rTxt = '''
        data <- read.table("''' + str(input) + '''", header = TRUE, sep = "\t" )
        png("''' + str(output.basechange_group) + '''")
        matplot(t(data[,2:ncol(data)]),xlab= "Quality Categories", ylab= "Variant Number", type = c("b"),pch=20,col = data[,1]) #plot
        legend("topleft", legend = data[,1], col=data[,1], pch=20)
        axis(1, at=2:ncol(data), labels=colnames(data[,2:ncol(data)]),las=2)
        dev.off()
        '''
        with open(output.R, 'w') as R:
            R.write(rTxt)
        shell('R --vanilla < {output.R} > {output.Rout}')	